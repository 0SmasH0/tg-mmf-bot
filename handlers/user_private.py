import json
import datetime

from aiogram import types, Router, F, Bot

from aiogram.filters import Command, or_f, StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.types import Message
from aiogram.utils.formatting import as_list, as_marked_section, Bold, Italic, Text

from keyboards import reply
from filters.chat_types import ChatTypeFilter
from keyboards import dynamic_kb
from dotenv import find_dotenv, load_dotenv
from function.text_refactor import refactoring_text, full_decor, section_decor

from keyboards.dynamic_kb import dynamics_kb_subgroups, dynamics_kb_menu, dynamics_kb_groups

load_dotenv(find_dotenv())

user_private_router = Router()
user_private_router.message.filter(ChatTypeFilter(['private']))


@user_private_router.message(Command('start'))
async def start_cmd(message: types.Message, state: FSMContext):
    text = as_list(Bold("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ MMF Helper!"), "\n–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –≤–∞—Å –ø—É–Ω–∫—Ç")
    current_state = await state.get_state()
    if current_state:
        await state.clear()
    await message.answer(text.as_html(), reply_markup=reply.start_kb.as_markup(resize_keyboard=True))


@user_private_router.message(F.text.lower().contains('–≤ –Ω–∞—á–∞–ª–æ'))
async def start(message: types.Message, state: FSMContext):
    current_state = await state.get_state()
    if current_state:
        await state.clear()

    text = Bold('–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –≤–∞—Å –ø—É–Ω–∫—Ç')

    await message.answer(text.as_html(), reply_markup=reply.start_kb.as_markup(resize_keyboard=True))


@user_private_router.message(Command('about'))
async def about_cmd(message: types.Message):
    await message.answer('–ó–¥–µ—Å—å –ø–æ–∫–∞ –Ω–∏—á–µ–≥–æ –Ω–µ—Ç', reply_markup=reply.back_to_start.as_markup(resize_keyboard=True))


# –ö–æ–¥ –Ω–∏–∂–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–∏–∞–ª–æ–≥–∞ –ø–æ –∫–Ω–æ–ø–∫–µ "–ú–µ–Ω—é —Å—Ç–æ–ª–æ–≤–æ–π"

class KitchenMenu(StatesGroup):
    text = State()


@user_private_router.message(StateFilter(None), F.text.lower().contains("–º–µ–Ω—é —Å—Ç–æ–ª–æ–≤–æ–π"))
async def kitchen_menu(message: types.Message, state: FSMContext):
    preview = Bold('–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â—É—é –≤–∞—Å –ø–æ–∑–∏—Ü–∏—é –º–µ–Ω—é')
    kb_m = dynamics_kb_menu()
    await message.answer(preview.as_html(), reply_markup=kb_m.as_markup(resize_keyboard=True))
    await state.set_state(KitchenMenu.text)


@user_private_router.message(KitchenMenu.text, F.text)
async def kitchen_menu_2(message: types.Message, state: FSMContext):
    await state.update_data(text=message.text)
    data = await state.get_data()

    menu = ['–ú–µ–Ω—é —Ü–µ–ª–∏–∫–æ–º', '–ì–æ—Ä—è—á–∏–µ –±–ª—é–¥–∞', '–ì–∞—Ä–Ω–∏—Ä—ã', '–°—É–ø—ã', '–°–∞–ª–∞—Ç—ã', '–î–µ—Å–µ—Ä—Ç—ã', '–ù–∞–ø–∏—Ç–∫–∏',
            '–•–æ–ª–æ–¥–Ω—ã–µ –∑–∞–∫—É—Å–∫–∏', '–•–ª–µ–± –∏ —Ö–ª–µ–±–æ–±—É–ª–æ—á–Ω—ã–µ –∏–∑–¥–µ–ª–∏—è', "–ú—É—á–Ω—ã–µ –∏ –∫—É–ª–∏–Ω–∞—Ä–Ω—ã–µ –∏–∑–¥–µ–ª–∏—è"]

    for i in range(len(menu)):
        file_path = fr"menu\{menu[i]}.jpg"

        if data['text'] == menu[i]:

            await message.answer_photo(photo=types.FSInputFile(path=file_path))

        elif data['text'][:-1] == menu[i]:

            await message.answer_photo(photo=types.FSInputFile(path=file_path))


class Schedule(StatesGroup):
    course = State()
    group = State()
    subgroup = State()
    choice = State()

    texts = {
        'Schedule:course': '–í—ã–±–µ—Ä–∏—Ç–µ –∫—É—Ä—Å –∑–∞–Ω–æ–≤–æ',
        'Schedule:group': '–í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É –∑–∞–Ω–æ–≤–æ',
        'Schedule:subgroup': '–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥–≥—Ä—É–ø–ø—É –∑–∞–Ω–æ–≤–æ',
    }


#–í–µ—Ä–Ω—É—Ç—Å—è –Ω–∞ —à–∞–≥ –Ω–∞–∑–∞–¥ (–Ω–∞ –ø—Ä–æ—à–ª–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ)
@user_private_router.message(StateFilter('*'), F.text.lower().contains("–≤–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥"))
async def back_step_handler(message: types.Message, state: FSMContext) -> Message | None:
    current_state = await state.get_state()

    previous = None

    for step in Schedule.__all_states__:
        if step.state == current_state:
            info = f"–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –∫ –ø—Ä–æ—à–ª–æ–º—É —à–∞–≥—É \n\n<b>{Schedule.texts[previous.state]}</b>"
            await state.set_state(previous)

            match previous.state:
                case Schedule.course:
                    await message.answer(f'{info}', reply_markup=reply.courses.as_markup(resize_keyboard=True))

                case Schedule.group:
                    data = await state.get_data()
                    course_now = data['course']
                    kb = dynamic_kb.dynamics_kb_groups(course_now)
                    await state.update_data(subgroup=[])
                    await message.answer(f'{info}', reply_markup=kb.as_markup(resize_keyboard=True))

                case Schedule.subgroup:
                    data = await state.get_data()
                    kb_s = dynamics_kb_subgroups(data['course'], data['group'])[0]

                    if kb_s is None:
                        await state.set_state(Schedule.group)
                        course_now = data['course']
                        await state.update_data(subgroup=[])
                        kb = dynamic_kb.dynamics_kb_groups(course_now)
                        info = f"–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –∫ –ø—Ä–æ—à–ª–æ–º—É —à–∞–≥—É \n\n<b>{Schedule.texts["Schedule:subgroup"]}</b>"
                        await message.answer(f'{info}', reply_markup=kb.as_markup(resize_keyboard=True))
                        return

                    await state.update_data(subgroup=[])
                    await message.answer(f'{info}', reply_markup=kb_s.as_markup(resize_keyboard=True))

            return
        previous = step


@user_private_router.message(StateFilter(None), F.text.lower().contains("—Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∑–∞–Ω—è—Ç–∏–π"))
async def schedule_1(message: types.Message, state: FSMContext):
    text = Bold('–í—ã–±–µ—Ä–∏—Ç–µ –∫—É—Ä—Å')
    await message.answer(text.as_html(), reply_markup=reply.courses.as_markup(resize_keyboard=True))
    await state.set_state(Schedule.course)


@user_private_router.message(Schedule.course, F.text)
async def schedule_2(message: types.Message, state: FSMContext):
    if message.text.isdigit() and 1 <= int(message.text) <= 4:
        await state.update_data(course=message.text)
        data = await state.get_data()

        course_now = data['course']
        kb = dynamics_kb_groups(course_now)

        await message.answer(Bold('–í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É').as_html(), reply_markup=kb.as_markup(resize_keyboard=True))
        await state.set_state(Schedule.group)
    else:
        await message.answer(f'–ù–µ—Ç —Ç–∞–∫–æ–≥–æ –∫—É—Ä—Å–∞ ü•≤', reply_markup=reply.courses.as_markup(resize_keyboard=True))


@user_private_router.message(Schedule.group, F.text)
async def schedule_3(message: types.Message, state: FSMContext):
    file_path = fr"schedule\data.json"
    with open(file_path, "rb") as foo:
        last = json.load(foo)

    data = await state.get_data()
    var = last.get(data['course'])
    if var is None:
        var = 10

    if message.text == '–í–§' or (message.text.isdigit() and 1 <= int(message.text) <= int(var)):
        if message.text == '–í–§':
            await state.update_data(group='vf')
        else:
            await state.update_data(group=message.text)

        data = await state.get_data()
        kb_s = dynamics_kb_subgroups(data['course'], data['group'])[0]

        if kb_s is None:
            await state.update_data(subgroup=[])
            await message.answer(Bold('–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–π –≤–∞–º –ø—É–Ω–∫—Ç').as_html(),
                                 reply_markup=reply.choice_sc.as_markup(resize_keyboard=True))
            await state.set_state(Schedule.choice)
            return

        preview = as_list(
            as_marked_section(
                Bold('–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é:'),
                Italic(f'1Ô∏è‚É£ –ß—Ç–æ–±—ã –≤—ã–±—Ä–∞—Ç—å –ø–æ–¥–≥—Ä—É–ø–ø—É –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—â—É—é –∫–Ω–æ–ø–∫—É –≤ –º–µ–Ω—é.'),
                Italic(f'2Ô∏è‚É£ –ß—Ç–æ–±—ã —É–±—Ä–∞—Ç—å —É–∂–µ –≤—ã–±—Ä–∞–Ω–Ω—É—é –ø–æ–¥–≥—Ä—É–ø–ø—É –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –Ω–µ—ë –µ—â—ë —Ä–∞–∑.'),
                Italic(f'3Ô∏è‚É£ –ß—Ç–æ–±—ã –≤—ã–±—Ä–∞—Ç—å(—É–±—Ä–∞—Ç—å) –≤—Å–µ –ø–æ–¥–≥—Ä—É–ø–ø—ã, –º–æ–∂–Ω–æ –Ω–∞–∂–∞—Ç—å –∫–Ω–æ–ø–∫—É \"–í—ã–±—Ä–∞—Ç—å –≤—Å—ë\".'),
                Italic(f'4Ô∏è‚É£ –ü–æ—Å–ª–µ —Ç–æ–≥–æ –∫–∞–∫ –≤—ã –≤—ã–±—Ä–∞–ª–∏ –Ω—É–∂–Ω—ã–µ(-—É—é) –≤–∞–º –ø–æ–¥–≥—Ä—É–ø–ø—ã(-—É) –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É \"–ì–æ—Ç–æ–≤–æ\".\n'),
                marker=''
            ),
            Bold(f'–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–µ(-—É—é) –≤–∞–º –ø–æ–¥–≥—Ä—É–ø–ø—ã(-—É):'),
        )

        await message.answer(preview.as_html(), reply_markup=kb_s.as_markup(resize_keyboard=True))
        await state.set_state(Schedule.subgroup)
    else:

        kb = dynamic_kb.dynamics_kb_groups(data['course'])

        await message.answer(f'–ù–µ—Ç —Ç–∞–∫–æ–π –≥—Ä—É–ø–ø—ã ü•≤', reply_markup=kb.as_markup(resize_keyboard=True))


@user_private_router.message(Schedule.subgroup, F.text)
async def schedule_4(message: types.Message, state: FSMContext):
    data = await state.get_data()

    kb_s, sbg = dynamics_kb_subgroups(data['course'], data['group'])

    if 'subgroup' not in data:
        data.update({'subgroup': []})

    if message.text not in [*sbg, '–ì–æ—Ç–æ–≤–æ', '–í—ã–±—Ä–∞—Ç—å –≤—Å—ë']:
        await message.answer(f'–ù–µ—Ç —Ç–∞–∫–æ–π –ø–æ–¥–≥—Ä—É–ø–ø—ã ü•≤',
                             reply_markup=kb_s.as_markup(resize_keyboard=True))
        return

    elif message.text == "–ì–æ—Ç–æ–≤–æ":
        await state.set_state(Schedule.choice)
        await state.update_data(subgroup=data['subgroup'])
        await message.answer(Bold('–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–π –≤–∞–º –ø—É–Ω–∫—Ç').as_html(),
                             reply_markup=reply.choice_sc.as_markup(resize_keyboard=True))
        return

    elif message.text == '–í—ã–±—Ä–∞—Ç—å –≤—Å—ë':
        if len(data['subgroup']) == len(sbg):
            data['subgroup'] = []
        else:
            data['subgroup'] = sbg

    elif message.text not in data['subgroup']:
        data['subgroup'].append(message.text)

    else:
        data['subgroup'].remove(message.text)

    await state.update_data(subgroup=data['subgroup'])

    if not data['subgroup']:
        await message.answer(f"{f'<i>–£ –≤–∞—Å –Ω–∏—á–µ–≥–æ –Ω–µ –≤—ã–±—Ä–∞–Ω–æ</i>'}",
                             reply_markup=kb_s.as_markup(resize_keyboard=True))
    else:
        await message.answer(f"{f'<i>–£ –≤–∞—Å –≤—ã–±—Ä–∞–Ω–æ:</i> <b>{", ".join(sorted(data["subgroup"]))}</b>'}",
                             reply_markup=kb_s.as_markup(resize_keyboard=True))


@user_private_router.message(Schedule.choice, F.text)
async def schedule_5(message: types.Message, state: FSMContext):
    await state.update_data(choice=message.text)
    data = await state.get_data()

    date = datetime.datetime.now()

    k = data['course']
    g = data['group']

    if g.isdigit():
        file_path = fr"schedule\{k}-kurs\{k}-{g}.json"

    else:
        file_path = fr"schedule\{k}-kurs\{k}-vf.json"

    with open(file_path, 'rb') as file:
        sc = json.load(file)

    with open('week_today.txt', 'r', encoding='utf-8') as foo:
        week = foo.read()

    sbg = data['subgroup']
    sbg.extend([week])

    day_of_week = ["–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫", "–í—Ç–æ—Ä–Ω–∏–∫", "–°—Ä–µ–¥–∞", "–ß–µ—Ç–≤–µ—Ä–≥", "–ü—è—Ç–Ω–∏—Ü–∞", "–°—É–±–±–æ—Ç–∞", "–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ"]

    sub = {"time": '–í—Ä–µ–º—è', "remarks": '–ì—Ä—É–ø–ø–∞', "subject": '–ü—Ä–µ–¥–º–µ—Ç', "lecture-practice": '–¢–∏–ø',
           "room": '–ö–∞–±–∏–Ω–µ—Ç', "teacher": '–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å', "date": '–î–Ω–∏ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è'}

    if data['choice'] == '–ù–∞ —Å–µ–≥–æ–¥–Ω—è':
        day = date.weekday()
        info = sc[day_of_week[day]] if (day_of_week[day] in sc) else False

        if not info:
            await message.answer('–£ –≤–∞—Å –Ω–µ—Ç —Å–µ–≥–æ–¥–Ω—è –ø–∞—Ä!!!',
                                 reply_markup=reply.choice_sc.as_markup(resize_keyboard=True))
            return
        else:
            my_list_2 = refactoring_text(info, sbg, date, sub)

            if not my_list_2:
                await message.answer('–£ –≤–∞—Å –Ω–µ—Ç —Å–µ–≥–æ–¥–Ω—è –ø–∞—Ä!!!',
                                     reply_markup=reply.choice_sc.as_markup(resize_keyboard=True))

            else:
                formatted_date = date.strftime("%d.%m.%Y")
                texts = full_decor(section_decor(my_list_2, day_of_week[day], formatted_date), data['choice'].lower(),
                                   k, g)

                await message.answer(texts.as_html(), reply_markup=reply.choice_sc.as_markup(resize_keyboard=True))

    elif data['choice'] == '–ù–∞ –∑–∞–≤—Ç—Ä–∞':
        day = date + datetime.timedelta(days=1)
        d_t = day.weekday()
        info = sc[day_of_week[d_t]] if (day_of_week[d_t] in sc) else False
        if not info:
            await message.answer('–£ –≤–∞—Å –Ω–µ—Ç –∑–∞–≤—Ç—Ä–∞ –ø–∞—Ä!!!',
                                 reply_markup=reply.choice_sc.as_markup(resize_keyboard=True))
            return
        else:
            my_list_2 = refactoring_text(info, sbg, day, sub)
            if not my_list_2:
                await message.answer('–£ –≤–∞—Å –Ω–µ—Ç –∑–∞–≤—Ç—Ä–∞ –ø–∞—Ä!!!',
                                     reply_markup=reply.choice_sc.as_markup(resize_keyboard=True))

            else:
                formatted_date = day.strftime("%d.%m.%Y")
                texts = full_decor(section_decor(my_list_2, day_of_week[d_t], formatted_date), data['choice'].lower(),
                                   k, g)
                await message.answer(texts.as_html(), reply_markup=reply.choice_sc.as_markup(resize_keyboard=True))

    elif data['choice'] == '–ù–∞ –Ω–µ–¥–µ–ª—é':
        if sc == {}:
            await message.answer("–í–æ–æ–±—â–µ –Ω–µ—Ç—É –ø–∞—Ä!!!", reply_markup=reply.choice_sc.as_markup(resize_keyboard=True))
        else:
            full_res = []
            for v in sc:
                idx = day_of_week.index(v)
                day = date.weekday()
                dif = idx - day
                if day in (5, 6):
                    res = date + datetime.timedelta(days=dif) + datetime.timedelta(days=7)
                else:
                    res = date + datetime.timedelta(days=dif)

                my_list_2 = refactoring_text(sc[v], sbg, res, sub)

                if my_list_2:
                    formatted_date = res.strftime("%d.%m.%Y")
                    schedule = section_decor(my_list_2, v, formatted_date)
                    full_res.append(schedule)

            if full_res:
                texts = full_decor(full_res, data['choice'].lower(), k, g)
                if len(texts) > 4096:
                    for x in range(0, len(texts), 4096):
                        await message.answer(texts[x:x + 4096].as_html(),
                                             reply_markup=reply.choice_sc.as_markup(resize_keyboard=True))
                else:
                    await message.answer(texts.as_html(), reply_markup=reply.choice_sc.as_markup(resize_keyboard=True))
            else:
                await message.answer('–£ –≤–∞—Å –Ω–µ—Ç –ø–∞—Ä!!!',
                                     reply_markup=reply.choice_sc.as_markup(resize_keyboard=True))

    else:
        await message.answer('–ù–µ—Ç —Ç–∞–∫–æ–≥–æ –ø—É–Ω–∫—Ç–∞ ü•≤')


@user_private_router.message(F.text)
async def cmd(message: types.Message):
    await message.answer('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é –∫–Ω–æ–ø–∫—É')


@user_private_router.message(F.text.lower() == '–ø—Ä–æ—á–µ–µ')
async def cmd(message: types.Message):
    await message.answer('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é –∫–Ω–æ–ø–∫—É')
